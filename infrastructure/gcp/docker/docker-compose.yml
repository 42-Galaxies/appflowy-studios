services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: appflowy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: appflowy
      POSTGRES_USER: appflowy
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - appflowy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appflowy"]
      interval: 30s
      timeout: 10s
      retries: 5

  gotrue:
    image: supabase/gotrue:v2.151.0
    container_name: appflowy-gotrue
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://appflowy:${POSTGRES_PASSWORD}@postgres:5432/appflowy?search_path=auth
      GOTRUE_SITE_URL: ${APPFLOWY_WEB_URL:-http://localhost:8000}
      GOTRUE_URI_ALLOW_LIST: ${APPFLOWY_WEB_URL:-http://localhost:8000}
      GOTRUE_JWT_SECRET: ${GOTRUE_JWT_SECRET}
      GOTRUE_JWT_EXP: 3600
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_EXTERNAL_GOOGLE_ENABLED: ${GOOGLE_OAUTH_ENABLED:-false}
      GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOTRUE_EXTERNAL_GOOGLE_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI: ${APPFLOWY_WEB_URL:-http://localhost:8000}/auth/callback
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP:-false}
      GOTRUE_EXTERNAL_EMAIL_ENABLED: true
      GOTRUE_MAILER_AUTOCONFIRM: ${MAILER_AUTOCONFIRM:-false}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT:-587}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME:-AppFlowy}
      API_EXTERNAL_URL: ${APPFLOWY_WEB_URL:-http://localhost:8000}
    ports:
      - "9999:9999"
    networks:
      - appflowy-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9999/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Simplified backend approach - serving static AppFlowy web app
  appflowy-web:
    image: nginx:alpine
    container_name: appflowy-web
    restart: unless-stopped
    depends_on:
      - gotrue
    environment:
      - APPFLOWY_GOTRUE_URL=http://gotrue:9999
      - APPFLOWY_WEB_URL=${APPFLOWY_WEB_URL:-http://localhost:8000}
    ports:
      - "${APPFLOWY_PORT:-8000}:80"
    volumes:
      - ./web:/usr/share/nginx/html:ro
      - ./nginx-web.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - appflowy-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: appflowy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - appflowy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: appflowy-nginx
    restart: unless-stopped
    depends_on:
      - appflowy-web
      - gotrue
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - appflowy-network

networks:
  appflowy-network:
    driver: bridge

volumes:
  postgres_data:
  appflowy_data:
  redis_data:
  nginx_cache:
